@using BlazorIdle.Client.Services
@using BlazorIdle.Shared.Models

@* 装备面板组件 - Step 5: 装备系统UI预留 + Phase 6: 装备对比和限制提示 *@
<div class="equipment-panel" style="margin-top: 16px; padding: 16px; background: @BackgroundColor; border-radius: 4px; border: 1px solid @BorderColor;">
    <h6 style="margin: 0 0 12px 0; font-size: 14px; font-weight: bold;">🎒 @Title</h6>
    
    @if (IsLoading)
    {
        <div style="text-align: center; padding: 20px; color: #999;">
            <em>加载中...</em>
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div style="padding: 12px; background: #ffebee; border: 1px solid #ef5350; border-radius: 4px; color: #c62828;">
            ⚠️ @ErrorMessage
        </div>
    }
    else
    {
        @* 装备槽布局 - 17槽位系统 *@
        <div class="equipment-slots" style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 6px; margin-bottom: 16px;">
            @* 第一行：空 - 头部 - 空 *@
            <div></div>
            @RenderSlot("head", "头部", "🪖")
            <div></div>

            @* 第二行：肩部 - 颈部 - 背部 *@
            @RenderSlot("shoulder", "肩部", "🎽")
            @RenderSlot("neck", "颈部", "📿")
            @RenderSlot("back", "背部", "🧥")

            @* 第三行：主手 - 胸部 - 副手 *@
            @RenderSlot("mainhand", "主手", "⚔️")
            @RenderSlot("chest", "胸部", "🛡️")
            @RenderSlot("offhand", "副手", "🔰")

            @* 第四行：手腕 - 腰部 - 手套 *@
            @RenderSlot("wrist", "手腕", "⌚")
            @RenderSlot("waist", "腰部", "🎗️")
            @RenderSlot("hands", "手套", "🧤")

            @* 第五行：空 - 腿部 - 空 *@
            <div></div>
            @RenderSlot("legs", "腿部", "🦵")
            <div></div>

            @* 第六行：戒指1 - 脚部 - 戒指2 *@
            @RenderSlot("finger1", "戒指1", "💍")
            @RenderSlot("feet", "脚部", "👢")
            @RenderSlot("finger2", "戒指2", "💍")

            @* 第七行：空 - 饰品槽 - 空 *@
            <div></div>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px;">
                @RenderSlot("trinket1", "饰品1", "✨")
                @RenderSlot("trinket2", "饰品2", "✨")
            </div>
            <div></div>
        </div>

        @* 总属性面板 - 增强版 *@
        <div class="equipment-stats" style="padding: 12px; background: #f5f5f5; border-radius: 4px; border: 1px solid #e0e0e0;">
            <div style="font-size: 12px; font-weight: bold; margin-bottom: 8px; color: #555;">📊 总属性</div>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px; font-size: 11px;">
                @* 攻击属性 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>⚔️ 攻击力:</span>
                    <span style="font-weight: bold; color: #d32f2f;">@GetStatValue("AttackPower")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🔮 法术强度:</span>
                    <span style="font-weight: bold; color: #7b1fa2;">@GetStatValue("SpellPower")</span>
                </div>
                
                @* 防御属性 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>🛡️ 护甲:</span>
                    <span style="font-weight: bold; color: #1976d2;">@GetStatValue("Armor")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🔰 格挡率:</span>
                    <span style="font-weight: bold; color: #0277bd;">@GetStatPercentDisplay("BlockChance")</span>
                </div>
                
                @* 速度与暴击 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>⚡ 急速:</span>
                    <span style="font-weight: bold; color: #f57c00;">@GetStatPercent("HastePercent")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>💥 暴击:</span>
                    <span style="font-weight: bold; color: #c2185b;">@GetStatPercent("CritChance")</span>
                </div>
                
                @* 攻击速度（如果有武器） *@
                @if (!string.IsNullOrEmpty(WeaponInfo) && GetAttackSpeed() > 0)
                {
                    <div style="display: flex; justify-content: space-between;">
                        <span>⏱️ 攻击速度:</span>
                        <span style="font-weight: bold; color: #ff6f00;">@GetAttackSpeedDisplay()</span>
                    </div>
                }
                
                @* 其他属性 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>💪 力量:</span>
                    <span style="font-weight: bold; color: #d84315;">@GetStatValue("Strength")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🎯 敏捷:</span>
                    <span style="font-weight: bold; color: #388e3c;">@GetStatValue("Agility")</span>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <span>🧠 智力:</span>
                    <span style="font-weight: bold; color: #1976d2;">@GetStatValue("Intellect")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>❤️ 耐力:</span>
                    <span style="font-weight: bold; color: #e53935;">@GetStatValue("Stamina")</span>
                </div>
            </div>
            
            @* 武器信息和DPS *@
            @if (!string.IsNullOrEmpty(WeaponInfo) || GetEstimatedDps() > 0)
            {
                <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #e0e0e0; font-size: 11px;">
                    @if (!string.IsNullOrEmpty(WeaponInfo))
                    {
                        <div style="color: #666; margin-bottom: 4px;">
                            🗡️ @WeaponInfo
                        </div>
                    }
                    @if (GetEstimatedDps() > 0)
                    {
                        <div style="color: #d32f2f; font-weight: bold;">
                            ⚔️ 预估DPS: @GetFormattedDps()
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    /// <summary>角色ID</summary>
    [Parameter] public Guid CharacterId { get; set; }
    
    /// <summary>标题</summary>
    [Parameter] public string Title { get; set; } = "装备与属性";
    
    /// <summary>背景颜色</summary>
    [Parameter] public string BackgroundColor { get; set; } = "#fff8e1";
    
    /// <summary>边框颜色</summary>
    [Parameter] public string BorderColor { get; set; } = "#ffb74d";
    
    /// <summary>是否正在加载</summary>
    [Parameter] public bool IsLoading { get; set; }
    
    /// <summary>错误消息</summary>
    [Parameter] public string ErrorMessage { get; set; } = "";
    
    /// <summary>装备槽列表</summary>
    [Parameter] public List<EquipmentSlotDto> Slots { get; set; } = new();
    
    /// <summary>总属性</summary>
    [Parameter] public Dictionary<string, double> TotalStats { get; set; } = new();
    
    /// <summary>武器信息显示</summary>
    [Parameter] public string WeaponInfo { get; set; } = "";
    
    /// <summary>角色职业（用于职业限制检查）</summary>
    [Parameter] public Profession CharacterProfession { get; set; }
    
    /// <summary>角色等级（用于等级限制检查）</summary>
    [Parameter] public int CharacterLevel { get; set; }
    
    /// <summary>装备对比服务（可选，用于显示对比信息）</summary>
    private EquipmentComparisonService? _comparisonService = new();
    
    /// <summary>装备限制辅助服务（用于检查职业和等级限制）</summary>
    private EquipmentRestrictionHelper? _restrictionHelper = new();
    
    /// <summary>DPS计算服务（用于显示战斗输出）</summary>
    private DpsCalculatorService? _dpsCalculator = new();

    /// <summary>渲染单个装备槽</summary>
    private RenderFragment RenderSlot(string slotType, string slotName, string defaultIcon) => builder =>
    {
        var slot = Slots.FirstOrDefault(s => s.SlotType == slotType);
        var hasItem = slot?.Item != null;
        
        // 检查装备限制
        bool canEquip = true;
        if (hasItem && _restrictionHelper != null)
        {
            var restriction = _restrictionHelper.CheckRestrictions(slot!.Item!, CharacterProfession, CharacterLevel);
            canEquip = restriction.CanEquip;
        }
        
        // 根据限制情况调整颜色
        var bgColor = hasItem ? (canEquip ? "#e8f5e9" : "#ffebee") : "#fafafa";
        var borderColor = hasItem ? (canEquip ? "#66bb6a" : "#f44336") : "#e0e0e0";
        var icon = hasItem ? (slot!.Item!.Icon ?? defaultIcon) : defaultIcon;
        var itemName = hasItem ? slot!.Item!.Name : slotName;
        var opacity = hasItem ? "1.0" : "0.4";

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "equipment-slot");
        builder.AddAttribute(2, "style", $"position: relative; padding: 8px; background: {bgColor}; border: 2px solid {borderColor}; border-radius: 6px; text-align: center; cursor: pointer; opacity: {opacity}; min-height: 60px; display: flex; flex-direction: column; align-items: center; justify-content: center;");
        builder.AddAttribute(3, "title", hasItem ? GetItemTooltipWithComparison(slot!.Item!, slotType) : $"空 - {slotName}");

        // 图标
        builder.OpenElement(4, "div");
        builder.AddAttribute(5, "style", "font-size: 24px; margin-bottom: 2px;");
        builder.AddContent(6, icon);
        builder.CloseElement();

        // 名称
        builder.OpenElement(7, "div");
        builder.AddAttribute(8, "style", "font-size: 9px; color: #555; font-weight: bold; max-width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;");
        builder.AddContent(9, itemName);
        builder.CloseElement();

        // 品质标签（如果有装备）
        if (hasItem)
        {
            var rarityColor = GetRarityColor(slot!.Item!.Rarity);
            builder.OpenElement(10, "div");
            builder.AddAttribute(11, "style", $"position: absolute; top: 2px; right: 2px; font-size: 8px; padding: 1px 4px; background: {rarityColor}; color: white; border-radius: 2px; font-weight: bold;");
            builder.AddContent(12, GetRarityText(slot!.Item!.Rarity));
            builder.CloseElement();
        }
        
        // 限制状态标识（如果有装备且无法装备）
        if (hasItem && !canEquip && _restrictionHelper != null)
        {
            builder.OpenElement(13, "div");
            builder.AddAttribute(14, "style", "position: absolute; top: 2px; left: 2px; font-size: 12px; color: #f44336; background: rgba(255,255,255,0.8); border-radius: 50%; width: 18px; height: 18px; display: flex; align-items: center; justify-content: center; font-weight: bold;");
            builder.AddContent(15, _restrictionHelper.GetRestrictionIcon(false));
            builder.CloseElement();
        }

        builder.CloseElement();
    };

    /// <summary>获取属性值</summary>
    private string GetStatValue(string statId)
    {
        if (TotalStats.TryGetValue(statId, out var value))
        {
            return value > 0 ? $"+{value:F0}" : "0";
        }
        return "0";
    }

    /// <summary>获取百分比属性值</summary>
    private string GetStatPercent(string statId)
    {
        if (TotalStats.TryGetValue(statId, out var value))
        {
            return value > 0 ? $"+{value * 100:F1}%" : "0%";
        }
        return "0%";
    }

    /// <summary>获取品质颜色</summary>
    private string GetRarityColor(string rarity)
    {
        return rarity switch
        {
            "Common" => "#9e9e9e",
            "Rare" => "#2196f3",
            "Epic" => "#9c27b0",
            "Legendary" => "#ff9800",
            _ => "#9e9e9e"
        };
    }

    /// <summary>获取品质文本</summary>
    private string GetRarityText(string rarity)
    {
        return rarity switch
        {
            "Common" => "普通",
            "Rare" => "稀有",
            "Epic" => "史诗",
            "Legendary" => "传说",
            _ => "未知"
        };
    }

    /// <summary>获取装备提示信息</summary>
    private string GetItemTooltip(GearInstanceDto item)
    {
        var tooltip = $"{item.Name}\n";
        tooltip += $"品质: {GetRarityText(item.Rarity)} (T{item.Tier})\n";
        tooltip += $"物品等级: {item.ItemLevel}\n";
        tooltip += $"装备评分: {item.QualityScore}\n";
        
        // 显示护甲类型（如果有）
        if (!string.IsNullOrEmpty(item.ArmorType) && item.ArmorType != "None")
        {
            tooltip += $"护甲类型: {GetArmorTypeName(item.ArmorType)}\n";
        }
        
        // 显示武器类型和攻击速度（如果有）
        if (!string.IsNullOrEmpty(item.WeaponType) && item.WeaponType != "None")
        {
            tooltip += $"武器类型: {GetWeaponTypeName(item.WeaponType)}\n";
            
            // 计算该武器的攻击速度
            if (_dpsCalculator != null)
            {
                var testStats = new Dictionary<string, double>(TotalStats);
                var dpsResult = _dpsCalculator.CalculateDps(testStats, item.WeaponType);
                if (dpsResult.AttackInterval > 0)
                {
                    var attackSpeed = 1.0 / dpsResult.AttackInterval;
                    tooltip += $"攻击速度: {attackSpeed:F2}/秒 ({dpsResult.AttackInterval:F2}秒间隔)\n";
                }
            }
        }
        
        // 检查职业和等级限制（如果有限制辅助服务）
        if (_restrictionHelper != null)
        {
            var restriction = _restrictionHelper.CheckRestrictions(item, CharacterProfession, CharacterLevel);
            if (!restriction.CanEquip)
            {
                tooltip += "\n━━━━━━━━━━━━━━━━\n";
                tooltip += _restrictionHelper.GenerateRestrictionTooltip(restriction) + "\n";
            }
        }
        
        if (item.Stats.Count > 0)
        {
            tooltip += "\n━━━━━━━━━━━━━━━━\n装备属性:\n";
            foreach (var stat in item.Stats.OrderByDescending(s => Math.Abs(s.Value)))
            {
                var displayValue = IsPercentageStat(stat.Key) 
                    ? $"+{stat.Value * 100:F1}%" 
                    : $"+{stat.Value:F0}";
                tooltip += $"  {GetStatDisplayName(stat.Key)}: {displayValue}\n";
            }
        }
        
        if (item.Affixes.Count > 0)
        {
            tooltip += "\n━━━━━━━━━━━━━━━━\n特殊词条:\n";
            foreach (var affix in item.Affixes)
            {
                tooltip += $"  • {affix.DisplayText}\n";
            }
        }
        
        // 如果是武器，显示预估单件DPS
        if (!string.IsNullOrEmpty(item.WeaponType) && item.WeaponType != "None" && _dpsCalculator != null)
        {
            var testStats = new Dictionary<string, double>(TotalStats);
            foreach (var (key, value) in item.Stats)
            {
                testStats[key] = testStats.GetValueOrDefault(key, 0) + value;
            }
            var dpsResult = _dpsCalculator.CalculateDps(testStats, item.WeaponType);
            if (dpsResult.TotalDps > 0)
            {
                tooltip += $"\n━━━━━━━━━━━━━━━━\n⚔️ 装备此武器DPS: {_dpsCalculator.FormatDps(dpsResult.TotalDps)}\n";
            }
        }
        
        return tooltip;
    }
    
    /// <summary>获取护甲类型显示名称</summary>
    private string GetArmorTypeName(string armorType)
    {
        return armorType switch
        {
            "Cloth" => "布甲",
            "Leather" => "皮甲",
            "Mail" => "锁甲",
            "Plate" => "板甲",
            _ => armorType
        };
    }
    
    /// <summary>获取武器类型显示名称</summary>
    private string GetWeaponTypeName(string weaponType)
    {
        return weaponType switch
        {
            "Sword" => "单手剑",
            "Dagger" => "匕首",
            "Axe" => "单手斧",
            "Mace" => "单手锤",
            "Fist" => "拳套",
            "Wand" => "魔杖",
            "TwoHandSword" => "双手剑",
            "TwoHandAxe" => "双手斧",
            "TwoHandMace" => "双手锤",
            "Staff" => "法杖",
            "Polearm" => "长柄武器",
            "Bow" => "弓",
            "Crossbow" => "弩",
            "Gun" => "枪械",
            "Shield" => "盾牌",
            _ => weaponType
        };
    }
    
    /// <summary>获取属性显示名称</summary>
    private string GetStatDisplayName(string statId)
    {
        return statId switch
        {
            "AttackPower" => "攻击力",
            "SpellPower" => "法术强度",
            "Armor" => "护甲",
            "CritChance" => "暴击率",
            "CritRating" => "暴击等级",
            "HastePercent" => "急速",
            "Haste" => "急速等级",
            "Strength" => "力量",
            "Agility" => "敏捷",
            "Intellect" => "智力",
            "Stamina" => "耐力",
            "BlockChance" => "格挡率",
            _ => statId
        };
    }
    
    /// <summary>判断是否为百分比属性</summary>
    private bool IsPercentageStat(string statId)
    {
        return statId switch
        {
            "CritChance" or "HastePercent" or "BlockChance" => true,
            _ => false
        };
    }
    
    /// <summary>
    /// 获取装备对比提示信息（增强版，显示与当前装备的差异）
    /// </summary>
    /// <param name="item">装备实例</param>
    /// <param name="slotType">槽位类型，用于查找当前装备</param>
    /// <returns>带对比信息的Tooltip</returns>
    private string GetItemTooltipWithComparison(GearInstanceDto item, string slotType)
    {
        var tooltip = GetItemTooltip(item);
        
        // 如果没有对比服务，返回基础tooltip
        if (_comparisonService == null)
        {
            return tooltip;
        }
        
        // 查找当前槽位的装备
        var currentSlot = Slots.FirstOrDefault(s => s.SlotType == slotType);
        var currentItem = currentSlot?.Item;
        
        // 如果当前槽位没有装备，或者就是同一件装备，不显示对比
        if (currentItem == null || currentItem.Id == item.Id)
        {
            return tooltip;
        }
        
        // 进行对比（传入全部属性以便计算DPS）
        var comparison = _comparisonService.Compare(currentItem, item, TotalStats);
        
        // 添加对比信息
        tooltip += "\n\n━━━━━━━━━━━━━━━━\n";
        tooltip += $"📊 与当前装备对比:\n";
        tooltip += $"评分: {(comparison.QualityScoreDifference >= 0 ? "+" : "")}{comparison.QualityScoreDifference}\n";
        tooltip += $"物品等级: {(comparison.ItemLevelDifference >= 0 ? "+" : "")}{comparison.ItemLevelDifference}\n";
        
        if (comparison.StatDifferences.Count > 0)
        {
            tooltip += "\n属性变化:\n";
            foreach (var (statId, difference) in comparison.StatDifferences.OrderByDescending(x => Math.Abs(x.Value)))
            {
                var arrow = difference > 0 ? "↑" : "↓";
                var displayValue = _comparisonService.GetDifferenceDisplayText(statId, difference, false);
                var statName = _comparisonService.GetStatDisplayName(statId);
                tooltip += $"  {arrow} {statName}: {displayValue}\n";
            }
        }
        
        // 如果是武器，显示DPS变化
        if (comparison.HasWeaponChange && _dpsCalculator != null)
        {
            tooltip += $"\n⚔️ DPS变化: {_dpsCalculator.FormatDpsDifference(comparison.DpsDifference, true, GetEstimatedDps())}\n";
        }
        
        tooltip += $"\n总体评估: {(comparison.IsUpgrade ? "✓ 升级" : "✗ 降级")}";
        
        return tooltip;
    }
    
    /// <summary>
    /// 计算预估DPS
    /// </summary>
    private double GetEstimatedDps()
    {
        if (_dpsCalculator == null || TotalStats == null || TotalStats.Count == 0)
        {
            return 0;
        }
        
        var dpsResult = _dpsCalculator.CalculateDps(TotalStats, WeaponInfo);
        return dpsResult.TotalDps;
    }
    
    /// <summary>
    /// 获取格式化的DPS显示
    /// </summary>
    private string GetFormattedDps()
    {
        if (_dpsCalculator == null)
        {
            return "0";
        }
        
        var dps = GetEstimatedDps();
        return _dpsCalculator.FormatDps(dps);
    }
    
    /// <summary>
    /// 获取攻击速度（每秒攻击次数）
    /// </summary>
    private double GetAttackSpeed()
    {
        if (_dpsCalculator == null || TotalStats == null || TotalStats.Count == 0)
        {
            return 0;
        }
        
        var dpsResult = _dpsCalculator.CalculateDps(TotalStats, WeaponInfo);
        if (dpsResult.AttackInterval > 0)
        {
            return 1.0 / dpsResult.AttackInterval;
        }
        
        return 0;
    }
    
    /// <summary>
    /// 获取攻击速度显示
    /// </summary>
    private string GetAttackSpeedDisplay()
    {
        var attackSpeed = GetAttackSpeed();
        if (attackSpeed > 0)
        {
            return $"{attackSpeed:F2}/秒";
        }
        return "0/秒";
    }
    
    /// <summary>
    /// 获取百分比属性值显示（增强版，包含额外信息）
    /// </summary>
    private string GetStatPercentDisplay(string statId)
    {
        if (TotalStats.TryGetValue(statId, out var value))
        {
            if (value <= 0)
            {
                return "0%";
            }
            
            var percentText = $"+{value * 100:F1}%";
            
            // 如果是格挡率，添加减伤说明
            if (statId == "BlockChance" && value > 0)
            {
                // 格挡减伤30%
                var blockReduction = 30.0;
                var effectiveReduction = value * blockReduction;
                percentText += $" (减伤{effectiveReduction:F1}%)";
            }
            
            return percentText;
        }
        return "0%";
    }
}
