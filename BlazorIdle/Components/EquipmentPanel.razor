@using BlazorIdle.Client.Services

@* 装备面板组件 - Step 5: 装备系统UI预留 *@
<div class="equipment-panel" style="margin-top: 16px; padding: 16px; background: @BackgroundColor; border-radius: 4px; border: 1px solid @BorderColor;">
    <h6 style="margin: 0 0 12px 0; font-size: 14px; font-weight: bold;">🎒 @Title</h6>
    
    @if (IsLoading)
    {
        <div style="text-align: center; padding: 20px; color: #999;">
            <em>加载中...</em>
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div style="padding: 12px; background: #ffebee; border: 1px solid #ef5350; border-radius: 4px; color: #c62828;">
            ⚠️ @ErrorMessage
        </div>
    }
    else
    {
        @* 装备槽布局 - 17槽位网格式 (方案B) *@
        <div class="equipment-slots" style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 6px; margin-bottom: 16px;">
            @* 第一行：颈部 - 头部 - 肩部 - 背部 - 空 *@
            @RenderSlot("Neck", "颈部", "📿")
            @RenderSlot("Head", "头部", "🪖")
            @RenderSlot("Shoulder", "肩部", "🎽")
            @RenderSlot("Back", "背部", "🧥")
            <div></div>

            @* 第二行：主手 - 胸甲 - 副手 - 手腕 - 空 *@
            @RenderSlot("MainHand", "主手", "⚔️")
            @RenderSlot("Chest", "胸部", "🛡️")
            @RenderSlot("OffHand", "副手", "🔰")
            @RenderSlot("Wrist", "手腕", "⌚")
            <div></div>

            @* 第三行：手部 - 腰部 - 腿部 - 脚部 - 空 *@
            @RenderSlot("Hands", "手部", "🧤")
            @RenderSlot("Waist", "腰部", "🎗️")
            @RenderSlot("Legs", "腿部", "🦵")
            @RenderSlot("Feet", "脚部", "👢")
            <div></div>

            @* 第四行：戒指1 - 饰品1 - 空 - 饰品2 - 戒指2 *@
            @RenderSlot("Finger1", "戒指1", "💍")
            @RenderSlot("Trinket1", "饰品1", "🔮")
            <div></div>
            @RenderSlot("Trinket2", "饰品2", "🔮")
            @RenderSlot("Finger2", "戒指2", "💍")
        </div>

        @* 总属性面板 *@
        <div class="equipment-stats" style="padding: 12px; background: #f5f5f5; border-radius: 4px; border: 1px solid #e0e0e0;">
            <div style="font-size: 12px; font-weight: bold; margin-bottom: 8px; color: #555;">📊 装备总属性</div>
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 6px; font-size: 10px;">
                @* 主要战斗属性 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>⚔️ 攻击强度:</span>
                    <span style="font-weight: bold; color: #d32f2f;">@GetStatValue("AttackPower")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🔮 法术强度:</span>
                    <span style="font-weight: bold; color: #9c27b0;">@GetStatValue("SpellPower")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🛡️ 护甲值:</span>
                    <span style="font-weight: bold; color: #1976d2;">@GetStatValue("Armor")</span>
                </div>
                
                @* 次要属性 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>💥 暴击:</span>
                    <span style="font-weight: bold; color: #f57c00;">@GetStatValue("CritRating")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>⚡ 急速:</span>
                    <span style="font-weight: bold; color: #ff9800;">@GetStatValue("Haste")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🎯 命中:</span>
                    <span style="font-weight: bold; color: #4caf50;">@GetStatValue("HitRating")</span>
                </div>
                
                @* 主属性 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>💪 力量:</span>
                    <span style="font-weight: bold; color: #e53935;">@GetStatValue("Strength")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🏃 敏捷:</span>
                    <span style="font-weight: bold; color: #43a047;">@GetStatValue("Agility")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🧠 智力:</span>
                    <span style="font-weight: bold; color: #3f51b5;">@GetStatValue("Intellect")</span>
                </div>
                
                @* 防御属性 *@
                <div style="display: flex; justify-content: space-between;">
                    <span>🛡️ 格挡:</span>
                    <span style="font-weight: bold; color: #5c6bc0;">@GetStatValue("BlockRating")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>🏃 闪避:</span>
                    <span style="font-weight: bold; color: #26a69a;">@GetStatValue("DodgeRating")</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>⚔️ 招架:</span>
                    <span style="font-weight: bold; color: #8d6e63;">@GetStatValue("ParryRating")</span>
                </div>
            </div>
        </div>
    }
</div>

@code {
    /// <summary>角色ID</summary>
    [Parameter] public Guid CharacterId { get; set; }
    
    /// <summary>标题</summary>
    [Parameter] public string Title { get; set; } = "装备与属性";
    
    /// <summary>背景颜色</summary>
    [Parameter] public string BackgroundColor { get; set; } = "#fff8e1";
    
    /// <summary>边框颜色</summary>
    [Parameter] public string BorderColor { get; set; } = "#ffb74d";
    
    /// <summary>是否正在加载</summary>
    [Parameter] public bool IsLoading { get; set; }
    
    /// <summary>错误消息</summary>
    [Parameter] public string ErrorMessage { get; set; } = "";
    
    /// <summary>装备槽列表</summary>
    [Parameter] public List<EquipmentSlotDto> Slots { get; set; } = new();
    
    /// <summary>总属性</summary>
    [Parameter] public Dictionary<string, double> TotalStats { get; set; } = new();

    /// <summary>渲染单个装备槽</summary>
    private RenderFragment RenderSlot(string slotType, string slotName, string defaultIcon) => builder =>
    {
        var slot = Slots.FirstOrDefault(s => s.SlotType == slotType);
        var hasItem = slot?.Item != null;
        var bgColor = hasItem ? "#e8f5e9" : "#fafafa";
        var borderColor = hasItem ? "#66bb6a" : "#e0e0e0";
        var icon = hasItem ? (slot!.Item!.Icon ?? defaultIcon) : defaultIcon;
        var itemName = hasItem ? slot!.Item!.Name : slotName;
        var opacity = hasItem ? "1.0" : "0.4";

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "equipment-slot");
        builder.AddAttribute(2, "style", $"position: relative; padding: 8px; background: {bgColor}; border: 2px solid {borderColor}; border-radius: 6px; text-align: center; cursor: pointer; opacity: {opacity}; min-height: 60px; display: flex; flex-direction: column; align-items: center; justify-content: center;");
        builder.AddAttribute(3, "title", hasItem ? GetItemTooltip(slot!.Item!) : $"空 - {slotName}");

        // 图标
        builder.OpenElement(4, "div");
        builder.AddAttribute(5, "style", "font-size: 24px; margin-bottom: 2px;");
        builder.AddContent(6, icon);
        builder.CloseElement();

        // 名称
        builder.OpenElement(7, "div");
        builder.AddAttribute(8, "style", "font-size: 9px; color: #555; font-weight: bold; max-width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;");
        builder.AddContent(9, itemName);
        builder.CloseElement();

        // 品质标签（如果有装备）
        if (hasItem)
        {
            var rarityColor = GetRarityColor(slot!.Item!.Rarity);
            builder.OpenElement(10, "div");
            builder.AddAttribute(11, "style", $"position: absolute; top: 2px; right: 2px; font-size: 8px; padding: 1px 4px; background: {rarityColor}; color: white; border-radius: 2px; font-weight: bold;");
            builder.AddContent(12, GetRarityText(slot!.Item!.Rarity));
            builder.CloseElement();
        }

        builder.CloseElement();
    };

    /// <summary>获取属性值</summary>
    private string GetStatValue(string statId)
    {
        if (TotalStats.TryGetValue(statId, out var value))
        {
            return value > 0 ? $"+{value:F0}" : "0";
        }
        return "0";
    }

    /// <summary>获取百分比属性值</summary>
    private string GetStatPercent(string statId)
    {
        if (TotalStats.TryGetValue(statId, out var value))
        {
            return value > 0 ? $"+{value * 100:F1}%" : "0%";
        }
        return "0%";
    }

    /// <summary>获取品质颜色</summary>
    private string GetRarityColor(string rarity)
    {
        return rarity switch
        {
            "Common" => "#9e9e9e",
            "Rare" => "#2196f3",
            "Epic" => "#9c27b0",
            "Legendary" => "#ff9800",
            _ => "#9e9e9e"
        };
    }

    /// <summary>获取品质文本</summary>
    private string GetRarityText(string rarity)
    {
        return rarity switch
        {
            "Common" => "普通",
            "Rare" => "稀有",
            "Epic" => "史诗",
            "Legendary" => "传说",
            _ => "未知"
        };
    }

    /// <summary>获取装备提示信息</summary>
    private string GetItemTooltip(GearInstanceDto item)
    {
        var tooltip = $"{item.Name}\n";
        tooltip += $"品质: {GetRarityText(item.Rarity)} (T{item.Tier})\n";
        tooltip += $"物品等级: {item.ItemLevel}\n";
        tooltip += $"装备评分: {item.QualityScore}\n";
        
        if (item.Stats.Count > 0)
        {
            tooltip += "\n属性:\n";
            foreach (var stat in item.Stats)
            {
                tooltip += $"  {stat.Key}: +{stat.Value:F0}\n";
            }
        }
        
        if (item.Affixes.Count > 0)
        {
            tooltip += "\n词条:\n";
            foreach (var affix in item.Affixes)
            {
                tooltip += $"  {affix.DisplayText}\n";
            }
        }
        
        return tooltip;
    }
}
