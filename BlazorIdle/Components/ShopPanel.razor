@using BlazorIdle.Client.Services
@using BlazorIdle.Shared.Models.Shop
@inject ApiClient Api

<div class="shop-panel">
    <h5>üè™ ÂïÜÂ∫óÁ≥ªÁªü</h5>
    
    @if (isLoading)
    {
        <p><em>Âä†ËΩΩ‰∏≠...</em></p>
    }
    else if (error is not null)
    {
        <div class="alert alert-danger">@error</div>
        <button class="btn btn-sm btn-outline-primary" @onclick="LoadShopsAsync">ÈáçËØï</button>
    }
    else
    {
        <!-- ÂïÜÂ∫óÂàóË°® -->
        @if (selectedShop is null)
        {
            <div class="shops-list">
                <h6>ÈÄâÊã©ÂïÜÂ∫ó:</h6>
                @if (shops is not null && shops.Count > 0)
                {
                    <div class="shop-cards">
                        @foreach (var shop in shops)
                        {
                            <div class="shop-card @(shop.IsUnlocked ? "" : "locked")" 
                                 @onclick="() => SelectShop(shop)"
                                 style="cursor: @(shop.IsUnlocked ? "pointer" : "not-allowed");">
                                <div class="shop-icon">@shop.Icon</div>
                                <div class="shop-info">
                                    <strong>@shop.Name</strong>
                                    <small class="text-muted">@shop.Description</small>
                                    <div class="shop-meta">
                                        <span class="badge bg-secondary">@shop.ItemCount ‰ª∂ÂïÜÂìÅ</span>
                                        @if (!shop.IsUnlocked)
                                        {
                                            <span class="badge bg-warning">üîí Êú™Ëß£ÈîÅ</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">ÊöÇÊó†ÂèØÁî®ÂïÜÂ∫ó</p>
                }
            </div>
        }
        else
        {
            <!-- ÂïÜÂìÅÂàóË°® -->
            <div class="shop-items">
                <div class="shop-header">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="BackToShops">‚Üê ËøîÂõûÂïÜÂ∫óÂàóË°®</button>
                    <h6>@selectedShop.Icon @selectedShop.Name</h6>
                </div>

                @if (isLoadingItems)
                {
                    <p><em>Âä†ËΩΩÂïÜÂìÅ‰∏≠...</em></p>
                }
                else if (shopItems is not null && shopItems.Count > 0)
                {
                    <div class="items-grid">
                        @foreach (var item in shopItems)
                        {
                            var canAfford = currentGold >= item.Price.Amount;
                            var cardClass = $"item-card rarity-{item.Rarity?.ToLower() ?? "common"}";
                            if (!item.CanPurchase) cardClass += " disabled";
                            
                            <div class="@cardClass">
                                <div class="item-header">
                                    <span class="item-icon">@item.ItemIcon</span>
                                    <div class="item-title">
                                        <strong>@item.ItemName</strong>
                                        <small class="text-muted">@item.ItemCategory</small>
                                    </div>
                                </div>
                                
                                <div class="item-details">
                                    <div class="item-price">
                                        <span class="price-icon">üí∞</span>
                                        <span class="@(canAfford ? "text-success" : "text-danger")">
                                            @item.Price.Amount G
                                        </span>
                                    </div>
                                    
                                    @if (item.MinLevel > 1)
                                    {
                                        <div class="item-requirement">
                                            <span>ÈúÄË¶ÅÁ≠âÁ∫ß: @item.MinLevel</span>
                                        </div>
                                    }
                                    
                                    @if (item.PurchaseLimit.Type != "Unlimited")
                                    {
                                        <div class="item-limit">
                                            <small>
                                                ÈôêË¥≠: @item.CurrentPurchaseCount / @item.PurchaseLimit.MaxPurchases
                                                (@GetLimitTypeText(item.PurchaseLimit.Type))
                                            </small>
                                        </div>
                                    }
                                </div>
                                
                                <div class="item-actions">
                                    @if (item.CanPurchase && canAfford)
                                    {
                                        <button class="btn btn-sm btn-primary w-100" 
                                                @onclick="() => PurchaseItem(item)"
                                                disabled="@isPurchasing">
                                            @(isPurchasing && purchasingItemId == item.Id ? "Ë¥≠‰π∞‰∏≠..." : "Ë¥≠‰π∞")
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-secondary w-100" disabled>
                                            @(item.PurchaseBlockReason ?? (canAfford ? "‰∏çÂèØË¥≠‰π∞" : "ÈáëÂ∏Å‰∏çË∂≥"))
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">ËØ•ÂïÜÂ∫óÊöÇÊó†ÂïÜÂìÅ</p>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public Guid CharacterId { get; set; }

    [Parameter]
    public string CharacterName { get; set; } = "";

    [Parameter]
    public int CharacterLevel { get; set; } = 1;

    [Parameter]
    public EventCallback OnPurchaseComplete { get; set; }

    private List<ShopDto>? shops;
    private ShopDto? selectedShop;
    private List<ShopItemDto>? shopItems;
    private bool isLoading;
    private bool isLoadingItems;
    private bool isPurchasing;
    private string? purchasingItemId;
    private string? error;
    private long currentGold;

    protected override async Task OnParametersSetAsync()
    {
        if (CharacterId != Guid.Empty)
        {
            await LoadGoldAsync();
            
            if (shops is null)
            {
                await LoadShopsAsync();
            }
        }
    }

    private async Task LoadGoldAsync()
    {
        try
        {
            var inventory = await Api.GetInventoryAsync(CharacterId);
            if (inventory is not null)
            {
                currentGold = inventory.Gold;
            }
        }
        catch
        {
            // Silently fail - gold will be 0
        }
    }

    private async Task LoadShopsAsync()
    {
        try
        {
            isLoading = true;
            error = null;
            StateHasChanged();

            var response = await Api.GetShopsAsync(CharacterId);
            if (response is not null)
            {
                shops = response.Shops;
            }
        }
        catch (Exception ex)
        {
            error = $"Âä†ËΩΩÂïÜÂ∫óÂ§±Ë¥•: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectShop(ShopDto shop)
    {
        if (!shop.IsUnlocked)
        {
            return;
        }

        selectedShop = shop;
        await LoadShopItemsAsync(shop.Id);
    }

    private void BackToShops()
    {
        selectedShop = null;
        shopItems = null;
    }

    private async Task LoadShopItemsAsync(string shopId)
    {
        try
        {
            isLoadingItems = true;
            error = null;
            StateHasChanged();

            var response = await Api.GetShopItemsAsync(shopId, CharacterId);
            if (response is not null)
            {
                shopItems = response.Items;
            }
        }
        catch (Exception ex)
        {
            error = $"Âä†ËΩΩÂïÜÂìÅÂ§±Ë¥•: {ex.Message}";
        }
        finally
        {
            isLoadingItems = false;
            StateHasChanged();
        }
    }

    private async Task PurchaseItem(ShopItemDto item)
    {
        if (isPurchasing || !item.CanPurchase || currentGold < item.Price.Amount)
        {
            return;
        }

        try
        {
            isPurchasing = true;
            purchasingItemId = item.Id;
            error = null;
            StateHasChanged();

            var request = new PurchaseRequest
            {
                ShopItemId = item.Id,
                Quantity = 1
            };

            var response = await Api.PurchaseItemAsync(CharacterId, request);
            
            if (response is not null && response.Success)
            {
                // ÈáçÊñ∞Âä†ËΩΩÈáëÂ∏Å
                await LoadGoldAsync();
                
                // ÈáçÊñ∞Âä†ËΩΩÂïÜÂìÅÂàóË°®‰ª•Êõ¥Êñ∞Ë¥≠‰π∞Ê¨°Êï∞
                if (selectedShop is not null)
                {
                    await LoadShopItemsAsync(selectedShop.Id);
                }
                
                // ÈÄöÁü•Áà∂ÁªÑ‰ª∂Âà∑Êñ∞
                await OnPurchaseComplete.InvokeAsync();
            }
            else
            {
                error = response?.Message ?? "Ë¥≠‰π∞Â§±Ë¥•";
            }
        }
        catch (Exception ex)
        {
            error = $"Ë¥≠‰π∞Â§±Ë¥•: {ex.Message}";
        }
        finally
        {
            isPurchasing = false;
            purchasingItemId = null;
            StateHasChanged();
        }
    }

    private string GetLimitTypeText(string limitType)
    {
        return limitType switch
        {
            "Daily" => "ÊØèÊó•",
            "Weekly" => "ÊØèÂë®",
            "PerCharacter" => "Ê∞∏‰πÖ",
            _ => ""
        };
    }
}
