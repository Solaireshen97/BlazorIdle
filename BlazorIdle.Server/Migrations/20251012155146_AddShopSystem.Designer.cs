// <auto-generated />
using System;
using BlazorIdle.Server.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorIdle.Server.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20251012155146_AddShopSystem")]
    partial class AddShopSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("BlazorIdle.Server.Domain.Activities.ActivityPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BattleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BattleStateJson")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExecutedSeconds")
                        .HasColumnType("REAL");

                    b.Property<int>("LimitType")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("LimitValue")
                        .HasColumnType("REAL");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SlotIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ActivityPlans");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Characters.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Agility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(10);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intellect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(10);

                    b.Property<DateTime?>("LastOfflineSettledAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSeenAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Profession")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RosterOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("Stamina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(10);

                    b.Property<int>("Strength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(10);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "RosterOrder");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Characters.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId", "ItemId")
                        .IsUnique();

                    b.ToTable("inventory_items", (string)null);
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Characters.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Equipment.Models.Affix", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedSlots")
                        .HasColumnType("TEXT")
                        .HasColumnName("allowed_slots_json");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifierType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("RarityWeight")
                        .HasColumnType("REAL");

                    b.Property<string>("StatType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("ValueMax")
                        .HasColumnType("REAL");

                    b.Property<double>("ValueMin")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ModifierType");

                    b.HasIndex("StatType");

                    b.ToTable("affixes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "affix_strength",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "力量",
                            RarityWeight = 1.0,
                            StatType = "Strength",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 20.0,
                            ValueMin = 5.0
                        },
                        new
                        {
                            Id = "affix_agility",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "敏捷",
                            RarityWeight = 1.0,
                            StatType = "Agility",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 20.0,
                            ValueMin = 5.0
                        },
                        new
                        {
                            Id = "affix_intellect",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "智力",
                            RarityWeight = 1.0,
                            StatType = "Intellect",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 20.0,
                            ValueMin = 5.0
                        },
                        new
                        {
                            Id = "affix_stamina",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "耐力",
                            RarityWeight = 1.0,
                            StatType = "Stamina",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 20.0,
                            ValueMin = 5.0
                        },
                        new
                        {
                            Id = "affix_attack_power",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "攻击强度",
                            RarityWeight = 1.0,
                            StatType = "AttackPower",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 50.0,
                            ValueMin = 10.0
                        },
                        new
                        {
                            Id = "affix_crit_chance",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Percent",
                            Name = "暴击率",
                            RarityWeight = 0.69999999999999996,
                            StatType = "CritChance",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 0.050000000000000003,
                            ValueMin = 0.01
                        },
                        new
                        {
                            Id = "affix_spell_power",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "法术强度",
                            RarityWeight = 0.69999999999999996,
                            StatType = "SpellPower",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 50.0,
                            ValueMin = 10.0
                        },
                        new
                        {
                            Id = "affix_haste",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Percent",
                            Name = "急速",
                            RarityWeight = 0.80000000000000004,
                            StatType = "Haste",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 0.10000000000000001,
                            ValueMin = 0.02
                        },
                        new
                        {
                            Id = "affix_armor",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "护甲",
                            RarityWeight = 1.0,
                            StatType = "Armor",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 100.0,
                            ValueMin = 20.0
                        },
                        new
                        {
                            Id = "affix_mastery",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "精通等级",
                            RarityWeight = 0.80000000000000004,
                            StatType = "MasteryRating",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 50.0,
                            ValueMin = 10.0
                        },
                        new
                        {
                            Id = "affix_health",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "生命值",
                            RarityWeight = 1.0,
                            StatType = "Health",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 200.0,
                            ValueMin = 50.0
                        },
                        new
                        {
                            Id = "affix_dodge",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifierType = "Flat",
                            Name = "闪避等级",
                            RarityWeight = 0.90000000000000002,
                            StatType = "DodgeRating",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValueMax = 30.0,
                            ValueMin = 5.0
                        });
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Equipment.Models.GearDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedAffixPool")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("allowed_affix_pool_json");

                    b.Property<string>("ArmorType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseStats")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("base_stats_json");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("RarityWeights")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("rarity_weights_json");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SetId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TierMultipliers")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tier_multipliers_json");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeaponType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequiredLevel");

                    b.HasIndex("SetId");

                    b.HasIndex("Slot");

                    b.ToTable("gear_definitions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "weapon_iron_sword",
                            AllowedAffixPool = "[\"affix_attack_power\",\"affix_crit_chance\",\"affix_strength\",\"affix_agility\"]",
                            ArmorType = "None",
                            BaseStats = "{\"AttackPower\":{\"Min\":10,\"Max\":15}}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "⚔️",
                            Name = "铁剑",
                            RarityWeights = "{\"Common\":50,\"Rare\":30,\"Epic\":15,\"Legendary\":5}",
                            RequiredLevel = 1,
                            Slot = "MainHand",
                            TierMultipliers = "{\"1\":0.8,\"2\":1,\"3\":1.2}",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            WeaponType = "Sword"
                        },
                        new
                        {
                            Id = "shield_iron",
                            AllowedAffixPool = "[\"affix_armor\",\"affix_stamina\",\"affix_health\"]",
                            ArmorType = "None",
                            BaseStats = "{\"Armor\":{\"Min\":30,\"Max\":50},\"Stamina\":{\"Min\":5,\"Max\":10}}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "🛡️",
                            Name = "铁盾",
                            RarityWeights = "{\"Common\":50,\"Rare\":30,\"Epic\":15,\"Legendary\":5}",
                            RequiredLevel = 1,
                            Slot = "OffHand",
                            TierMultipliers = "{\"1\":0.8,\"2\":1,\"3\":1.2}",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            WeaponType = "Shield"
                        },
                        new
                        {
                            Id = "helm_cloth_basic",
                            AllowedAffixPool = "[\"affix_intellect\",\"affix_stamina\",\"affix_armor\"]",
                            ArmorType = "Cloth",
                            BaseStats = "{\"Armor\":{\"Min\":5,\"Max\":10},\"Intellect\":{\"Min\":3,\"Max\":8}}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "🪖",
                            Name = "布甲头盔",
                            RarityWeights = "{\"Common\":50,\"Rare\":30,\"Epic\":15,\"Legendary\":5}",
                            RequiredLevel = 1,
                            SetId = "set_mage_basic",
                            Slot = "Head",
                            TierMultipliers = "{\"1\":0.8,\"2\":1,\"3\":1.2}",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            WeaponType = "None"
                        },
                        new
                        {
                            Id = "chest_plate_basic",
                            AllowedAffixPool = "[\"affix_strength\",\"affix_stamina\",\"affix_armor\",\"affix_health\"]",
                            ArmorType = "Plate",
                            BaseStats = "{\"Armor\":{\"Min\":40,\"Max\":60},\"Strength\":{\"Min\":5,\"Max\":15}}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "🧥",
                            Name = "板甲胸甲",
                            RarityWeights = "{\"Common\":50,\"Rare\":30,\"Epic\":15,\"Legendary\":5}",
                            RequiredLevel = 1,
                            SetId = "set_warrior_basic",
                            Slot = "Chest",
                            TierMultipliers = "{\"1\":0.8,\"2\":1,\"3\":1.2}",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            WeaponType = "None"
                        },
                        new
                        {
                            Id = "belt_leather",
                            AllowedAffixPool = "[\"affix_agility\",\"affix_stamina\",\"affix_armor\"]",
                            ArmorType = "Leather",
                            BaseStats = "{\"Armor\":{\"Min\":15,\"Max\":25},\"Agility\":{\"Min\":3,\"Max\":8}}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "⚖️",
                            Name = "皮革腰带",
                            RarityWeights = "{\"Common\":50,\"Rare\":30,\"Epic\":15,\"Legendary\":5}",
                            RequiredLevel = 1,
                            Slot = "Waist",
                            TierMultipliers = "{\"1\":0.8,\"2\":1,\"3\":1.2}",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            WeaponType = "None"
                        },
                        new
                        {
                            Id = "ring_basic",
                            AllowedAffixPool = "[\"affix_attack_power\",\"affix_crit_chance\",\"affix_haste\"]",
                            ArmorType = "None",
                            BaseStats = "{\"AttackPower\":{\"Min\":5,\"Max\":10}}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "💍",
                            Name = "普通戒指",
                            RarityWeights = "{\"Common\":40,\"Rare\":35,\"Epic\":20,\"Legendary\":5}",
                            RequiredLevel = 1,
                            Slot = "Finger1",
                            TierMultipliers = "{\"1\":0.8,\"2\":1,\"3\":1.2}",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            WeaponType = "None"
                        });
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Equipment.Models.GearInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Affixes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("affixes_json");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefinitionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBound")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualityScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RolledStats")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("rolled_stats_json");

                    b.Property<string>("SetId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SlotType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TierLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("IsEquipped");

                    b.HasIndex("Rarity");

                    b.HasIndex("CharacterId", "SlotType");

                    b.ToTable("gear_instances", (string)null);
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Equipment.Models.GearSet", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bonuses")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("bonuses_json");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pieces")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("pieces_json");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("gear_sets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "set_warrior_basic",
                            Bonuses = "{\"2\":[{\"StatType\":0,\"ModifierType\":0,\"Value\":10}],\"4\":[{\"StatType\":4,\"ModifierType\":0,\"Value\":30},{\"StatType\":17,\"ModifierType\":0,\"Value\":100}]}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "战士基础套装",
                            Pieces = "[\"chest_plate_basic\"]",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "set_mage_basic",
                            Bonuses = "{\"2\":[{\"StatType\":2,\"ModifierType\":0,\"Value\":10}],\"4\":[{\"StatType\":4,\"ModifierType\":0,\"Value\":25},{\"StatType\":15,\"ModifierType\":1,\"Value\":0.03}]}",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "法师基础套装",
                            Pieces = "[\"helm_cloth_basic\"]",
                            UpdatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Records.BattleRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AttackIntervalSeconds")
                        .HasColumnType("REAL");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DungeonId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DungeonRuns")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DurationSeconds")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("EnemyArmor")
                        .HasColumnType("REAL");

                    b.Property<string>("EnemyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EnemyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<double>("EnemyMagicResist")
                        .HasColumnType("REAL");

                    b.Property<int>("EnemyMaxHp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnemyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("Exp")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("KillTimeSeconds")
                        .HasColumnType("REAL");

                    b.Property<bool>("Killed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LootJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("OverkillDamage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RewardType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SeedIndexEnd")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SeedIndexStart")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SpecialIntervalSeconds")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalDamage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Records.BattleSegmentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BattleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DamageBySourceJson")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DamageByTypeJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("EndTime")
                        .HasColumnType("REAL");

                    b.Property<int>("EventCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResourceFlowJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RngIndexEnd")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RngIndexStart")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StartTime")
                        .HasColumnType("REAL");

                    b.Property<string>("TagCountersJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalDamage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.ToTable("BattleSegments");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Records.EconomyEventRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BattleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("Exp")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdempotencyKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsJson")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BattleId")
                        .HasFilter("BattleId IS NOT NULL");

                    b.HasIndex("CharacterId");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique();

                    b.ToTable("economy_events", (string)null);
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Records.RunningBattleSnapshotRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnemyCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnemyId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Profession")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<double>("SimulatedSeconds")
                        .HasColumnType("REAL");

                    b.Property<string>("SnapshotJson")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StepBattleId")
                        .HasColumnType("TEXT");

                    b.Property<double>("TargetSeconds")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StepBattleId")
                        .IsUnique();

                    b.ToTable("RunningBattleSnapshots");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Shop.PurchaseCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("PurchaseCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ShopItemId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PeriodEnd");

                    b.HasIndex("CharacterId", "ShopItemId", "PeriodStart");

                    b.ToTable("PurchaseCounters");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Shop.PurchaseRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GoldPaid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemDefinitionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemPaidId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemPaidQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShopItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("PurchasedAt");

                    b.HasIndex("ShopItemId");

                    b.HasIndex("CharacterId", "PurchasedAt");

                    b.ToTable("PurchaseRecords");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Shop.ShopDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnlockCondition")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("SortOrder");

                    b.HasIndex("Type");

                    b.ToTable("ShopDefinitions");

                    b.HasData(
                        new
                        {
                            Id = "general_shop",
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "出售各类日常用品和基础物资",
                            Icon = "🏪",
                            IsEnabled = true,
                            Name = "杂货铺",
                            SortOrder = 1,
                            Type = 0,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "weapon_shop",
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "专业武器装备商店",
                            Icon = "⚔️",
                            IsEnabled = true,
                            Name = "武器店",
                            SortOrder = 2,
                            Type = 0,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "alchemist_shop",
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "出售各类药剂和炼金材料",
                            Icon = "🧪",
                            IsEnabled = true,
                            Name = "炼金术士",
                            SortOrder = 3,
                            Type = 0,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Shop.ShopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(-1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("ItemDefinitionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PriceJson")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseLimitJson")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("StockLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(-1);

                    b.Property<string>("UnlockCondition")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("ItemType");

                    b.HasIndex("ShopId");

                    b.HasIndex("SortOrder");

                    b.HasIndex("ShopId", "SortOrder");

                    b.ToTable("ShopItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = -1,
                            Description = "恢复100点生命值",
                            DisplayName = "小型生命药水",
                            Icon = "🧪",
                            IsEnabled = true,
                            ItemDefinitionId = "health_potion_small",
                            ItemType = 0,
                            PriceJson = "{\"currencyType\":0,\"amount\":50,\"itemId\":null,\"itemQuantity\":0}",
                            RequiredLevel = 1,
                            ShopId = "general_shop",
                            SortOrder = 1,
                            StockLimit = -1,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = -1,
                            Description = "恢复100点魔法值",
                            DisplayName = "小型魔法药水",
                            Icon = "💙",
                            IsEnabled = true,
                            ItemDefinitionId = "mana_potion_small",
                            ItemType = 0,
                            PriceJson = "{\"currencyType\":0,\"amount\":50,\"itemId\":null,\"itemQuantity\":0}",
                            RequiredLevel = 1,
                            ShopId = "general_shop",
                            SortOrder = 2,
                            StockLimit = -1,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = -1,
                            Description = "基础制作材料",
                            DisplayName = "布料",
                            Icon = "🧵",
                            IsEnabled = true,
                            ItemDefinitionId = "cloth",
                            ItemType = 2,
                            PriceJson = "{\"currencyType\":0,\"amount\":10,\"itemId\":null,\"itemQuantity\":0}",
                            RequiredLevel = 1,
                            ShopId = "general_shop",
                            SortOrder = 3,
                            StockLimit = -1,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = -1,
                            Description = "基础单手剑",
                            DisplayName = "铁剑",
                            Icon = "⚔️",
                            IsEnabled = true,
                            ItemDefinitionId = "sword_iron",
                            ItemType = 1,
                            PriceJson = "{\"currencyType\":0,\"amount\":500,\"itemId\":null,\"itemQuantity\":0}",
                            RequiredLevel = 5,
                            ShopId = "weapon_shop",
                            SortOrder = 1,
                            StockLimit = -1,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = -1,
                            Description = "基础盾牌",
                            DisplayName = "木盾",
                            Icon = "🛡️",
                            IsEnabled = true,
                            ItemDefinitionId = "shield_wood",
                            ItemType = 1,
                            PriceJson = "{\"currencyType\":0,\"amount\":400,\"itemId\":null,\"itemQuantity\":0}",
                            RequiredLevel = 5,
                            ShopId = "weapon_shop",
                            SortOrder = 2,
                            StockLimit = -1,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = -1,
                            Description = "恢复300点生命值",
                            DisplayName = "中型生命药水",
                            Icon = "🧪",
                            IsEnabled = true,
                            ItemDefinitionId = "health_potion_medium",
                            ItemType = 0,
                            PriceJson = "{\"currencyType\":0,\"amount\":150,\"itemId\":null,\"itemQuantity\":0}",
                            RequiredLevel = 10,
                            ShopId = "alchemist_shop",
                            SortOrder = 1,
                            StockLimit = -1,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = -1,
                            Description = "提升力量属性10点，持续30分钟",
                            DisplayName = "力量药剂",
                            Icon = "💪",
                            IsEnabled = true,
                            ItemDefinitionId = "elixir_strength",
                            ItemType = 0,
                            PriceJson = "{\"currencyType\":0,\"amount\":200,\"itemId\":null,\"itemQuantity\":0}",
                            PurchaseLimitJson = "{\"limitType\":2,\"maxPurchases\":5,\"resetPeriodSeconds\":null}",
                            RequiredLevel = 15,
                            ShopId = "alchemist_shop",
                            SortOrder = 2,
                            StockLimit = -1,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStock = 50,
                            Description = "高级炼金材料",
                            DisplayName = "稀有草药",
                            Icon = "🌿",
                            IsEnabled = true,
                            ItemDefinitionId = "herb_rare",
                            ItemType = 2,
                            PriceJson = "{\"currencyType\":0,\"amount\":100,\"itemId\":null,\"itemQuantity\":0}",
                            PurchaseLimitJson = "{\"limitType\":3,\"maxPurchases\":10,\"resetPeriodSeconds\":null}",
                            RequiredLevel = 20,
                            ShopId = "alchemist_shop",
                            SortOrder = 3,
                            StockLimit = 50,
                            UpdatedAt = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Characters.Character", b =>
                {
                    b.HasOne("BlazorIdle.Server.Domain.Characters.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Characters.InventoryItem", b =>
                {
                    b.HasOne("BlazorIdle.Server.Domain.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Equipment.Models.GearInstance", b =>
                {
                    b.HasOne("BlazorIdle.Server.Domain.Equipment.Models.GearDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Definition");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Records.BattleSegmentRecord", b =>
                {
                    b.HasOne("BlazorIdle.Server.Domain.Records.BattleRecord", null)
                        .WithMany("Segments")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Shop.ShopItem", b =>
                {
                    b.HasOne("BlazorIdle.Server.Domain.Shop.ShopDefinition", "Shop")
                        .WithMany("Items")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Characters.User", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Records.BattleRecord", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("BlazorIdle.Server.Domain.Shop.ShopDefinition", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
